// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}


model PlacesData {
  id         Int      @id @default(autoincrement())
  address_name String @unique
  address_street String
  address_zipcode String
  address_city String
  latitude       Float
  longitude      Float
  events     EventsData[] @relation("PlaceEvents")
  updatedAt  DateTime @updatedAt
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  events    EventsData[] @relation("EventTags") // Relation avec EventsData
}

model EventsData {
  id         String      @id @default(cuid())
  title       String     @unique
  info       String
  url        String
  lead_text  String
  description String
  date_start String
  date_end   String
  date_description String
  cover_url  String
  cover_alt  String
  cover_credit String
  audience   String
  contact_url String
  contact_mail String
  contact_facebook String
  contact_twitter String
  price_type String
  price_detail String
  access_type String
  access_link String
  access_link_text String
  tags       Tag[]        @relation("EventTags") // Relation avec le mod√®le Tag
  placeId    Int?
  place      PlacesData?  @relation("PlaceEvents", fields: [placeId], references: [id])
  updatedAt  DateTime @updatedAt
}
